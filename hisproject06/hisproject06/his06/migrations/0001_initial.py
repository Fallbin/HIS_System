# Generated by Django 2.0 on 2018-05-19 17:02

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(db_column='doctor_name', max_length=255, verbose_name='姓名')),
                ('sex', models.CharField(choices=[('male', '男'), ('female', '女')], db_column='doctor_sex', default='男', max_length=32, verbose_name='性别')),
                ('id_num', models.CharField(db_column='doctor_id_Num', max_length=255, verbose_name='身份证号')),
                ('birth', models.DateTimeField(db_column='doctor_birth', default=django.utils.timezone.now, max_length=6, verbose_name='生日')),
                ('phone_num', models.CharField(db_column='doctor_phone_num', max_length=255, verbose_name='联系方式')),
                ('address', models.CharField(db_column='doctor_address', max_length=255, verbose_name='住址')),
                ('nation', models.CharField(choices=[('0', '中国'), ('1', '美国'), ('2', '英国'), ('3', '韩国'), ('4', '朝鲜'), ('5', '日本'), ('６', '印度尼西亚')], db_column='doctor_nation', default='中国', max_length=32, verbose_name='国籍')),
                ('marriage', models.CharField(choices=[('0', '否'), ('1', '是')], db_column='doctor_marriage', default='否', max_length=6, verbose_name='婚姻状况')),
                ('num_all', models.IntegerField(db_column='doctor_num_all', default=100, verbose_name='总挂号人数')),
                ('num_left', models.IntegerField(db_column='doctor_num_left', verbose_name='剩余挂号人数')),
                ('priority', models.CharField(db_column='doctor_priority', default='1', max_length=6, verbose_name='权限')),
                ('_level', models.CharField(choices=[('0', '医生'), ('1', '护士'), ('2', '主班护士'), ('3', '护士长'), ('4', '科副主任'), ('5', '科主任'), ('6', '住院医师'), ('7', '主任医师'), ('8', '主治医师'), ('9', '副主任医师'), ('10', '院长'), ('11', '副院长')], db_column='level', default='0', max_length=5, verbose_name='职称')),
            ],
            options={
                'verbose_name_plural': 'users',
                'abstract': False,
                'db_table': 'Doctor',
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('department_id', models.CharField(db_column='department_id', max_length=5, primary_key=True, serialize=False, verbose_name='小科室ID')),
                ('department_name', models.CharField(db_column='department_name', max_length=255, verbose_name='小科室名称')),
                ('department_address', models.CharField(db_column='department_address', max_length=255, verbose_name='房间号')),
            ],
        ),
        migrations.CreateModel(
            name='Super',
            fields=[
                ('super_id', models.CharField(choices=[('001', '大内科'), ('002', '大外科'), ('003', '妇儿科'), ('004', '五官科'), ('004', '急诊科'), ('005', '病案、中医'), ('006', '医技科')], db_column='super_department_id', default='大内科', max_length=5, primary_key=True, serialize=False, verbose_name='大科室ID')),
                ('super_name', models.CharField(db_column='super_department_name', max_length=255, verbose_name='大科室名称')),
            ],
        ),
        migrations.AddField(
            model_name='department',
            name='super_id',
            field=models.ForeignKey(db_column='super_department_id', on_delete=django.db.models.deletion.DO_NOTHING, to='his06.Super'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='dep',
            field=models.ForeignKey(db_column='dep_id', on_delete=django.db.models.deletion.DO_NOTHING, to='his06.Department', verbose_name='所属科室'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
